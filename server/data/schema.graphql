type Answer implements Node {
  id: ID!
  title: String
  body: String
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]
}

type AnswerEdge {
  node: Answer
  cursor: String!
}

type Bot implements Node {
  id: ID!
  purpose: String
  pointsOfContact: [String]
  answers(after: String, first: Int, before: String, last: Int): AnswerConnection
  regexes(after: String, first: Int, before: String, last: Int): RegexConnection
}

type BotConnection {
  pageInfo: PageInfo!
  edges: [BotEdge]
}

type BotEdge {
  node: Bot
  cursor: String!
}

input CreateAnswerInput {
  title: String!
  body: String!
  botId: String!
  clientMutationId: String!
}

type CreateAnswerPayload {
  bot: Bot
  answerEdge: AnswerEdge
  clientMutationId: String!
}

input DeleteAnswerInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAnswerPayload {
  bot: Bot
  deletedId: ID
  clientMutationId: String!
}

input LogoutInput {
  clientMutationId: String!
}

type LogoutPayload {
  viewer: User
  clientMutationId: String!
}

type Mutation {
  createAnswer(input: CreateAnswerInput!): CreateAnswerPayload
  deleteAnswer(input: DeleteAnswerInput!): DeleteAnswerPayload
  updateAnswer(input: UpdateAnswerInput!): UpdateAnswerPayload
  updateBot(input: UpdateBotInput!): UpdateBotPayload
  logout(input: LogoutInput!): LogoutPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User
}

type Regex implements Node {
  id: ID!
  regex: String
  body: String
}

type RegexConnection {
  pageInfo: PageInfo!
  edges: [RegexEdge]
}

type RegexEdge {
  node: Regex
  cursor: String!
}

type SlackBot {
  id: String
}

type SlackInfo {
  bot: SlackBot
}

type Team implements Node {
  id: ID!
  name: String
  slack: SlackInfo
}

input UpdateAnswerInput {
  id: ID!
  title: String!
  body: String!
  clientMutationId: String!
}

type UpdateAnswerPayload {
  answer: Answer
  clientMutationId: String!
}

input UpdateBotInput {
  id: ID!
  purpose: String!
  pointsOfContact: [String]
  clientMutationId: String!
}

type UpdateBotPayload {
  bot: Bot
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  fullName: String
  team: Team
  bots(after: String, first: Int, before: String, last: Int): BotConnection
  anonymous: Boolean
}
